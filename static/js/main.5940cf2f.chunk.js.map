{"version":3,"sources":["components/menu.js","components/postCard.js","pages/home.js","router/root.js","App.js","serviceWorker.js","index.js"],"names":["mockTitle","MenuNav","history","useHistory","offsetTop","className","SlackOutlined","style","fontSize","mode","map","i","Item","onClick","push","key","backgroundColor","src","PostCard","props","title","tag","type","alt","Text","color","Title","level","size","alert","Home","fontWeight","padding","strong","whiteSpace","flexDirection","margin","marginTop","flex","display","marginRight","marginLeft","marginBottom","RootRouter","path","About","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5940cf2f.chunk.js","sourcesContent":["import React, { } from 'react'\r\nimport { Menu, Avatar, Affix } from 'antd';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { SlackOutlined } from '@ant-design/icons'\r\n\r\nconst mockTitle = ['World', 'Sports', 'Opinion', 'Home', 'About', 'Culture', 'Fashion', 'Tech']\r\n\r\nexport const MenuNav = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    let renderMenuItem = () => {\r\n        return mockTitle.map((i) => (\r\n            <Menu.Item\r\n                onClick={() => history.push(i)}\r\n                key={i}>{i}</Menu.Item>))\r\n    }\r\n\r\n    return (\r\n        <Affix offsetTop={0}>\r\n            <div className=\"_menu\">\r\n                <div className=\"_sideMenu\">\r\n                    <SlackOutlined style={{ fontSize: 25 }} />\r\n                </div>\r\n                <Menu mode=\"horizontal\">\r\n                    {renderMenuItem()}\r\n                </Menu>\r\n                <div className=\"_sideMenu\">\r\n                    <Avatar style={{ backgroundColor: '#87d068' }} src=\"https://f3.photo.talk.zdn.vn/6655498646126767586/8b29ebbd323fc861912e.jpg\" />\r\n                </div>\r\n            </div>\r\n        </Affix>\r\n    )\r\n}","import React, { } from 'react'\r\nimport { Typography, Button } from 'antd'\r\n\r\nexport const PostCard = (props) => {\r\n\r\n    const { title, tag , type = 'column'} = props\r\n\r\n    let onClick = () => {\r\n        alert(\"OK\")\r\n    }\r\n\r\n    return (\r\n        <div className={\"_post_card_\"+type}>\r\n            <img\r\n                alt=\"#\"\r\n                src=\"https://i.pinimg.com/564x/78/74/77/7874774a89616a437ed197c82d7dd82f.jpg\"\r\n                className=\"_cover_post_card\" />\r\n\r\n            <div className=\"_content_post_card\">\r\n\r\n                <div>\r\n                    <Typography.Text style={{ color: 'white' }}>{tag}</Typography.Text>\r\n                    <Typography.Title style={{ color: 'white' }} level={3}>{title}</Typography.Title>\r\n                </div>\r\n\r\n                <div>\r\n                    <Button size=\"middle\" onClick={onClick}>Read</Button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { } from 'react'\r\nimport { Typography } from 'antd';\r\n\r\nimport { PostCard } from '../components'\r\n\r\nexport const Home = () => {\r\n\r\n    return (\r\n        <div className=\"_content_home\">\r\n            <Typography.Title level={1} style={{ fontWeight: '300', padding: 5 }}>LifeStyle.</Typography.Title>\r\n            <Typography.Text strong style={{ fontSize: 15, whiteSpace: 'pre', padding: 5, }}>{`The latest and best lifestyle articles\\nselected by our editorial office.`}</Typography.Text>\r\n\r\n            <div className=\"_list_post_card\">\r\n                <div className=\"_column_list_post_card\" style={{ backgroundColor: 'white' }}>\r\n                    <PostCard tag=\"FOOD\" title=\"MLEM MLEM\" type=\"row\" />\r\n                    <div className=\"_column_list_post_card\" style={{ backgroundColor: 'white', flexDirection: 'row', margin : 0, padding:0, marginTop: '10px' }}>\r\n                        <div style={{ flex: 1, display: 'flex', marginRight: '5px' }}>\r\n                            <PostCard />\r\n                        </div>\r\n                        <div style={{ flex: 1, display: 'flex', marginLeft: '5px' }}>\r\n                            <PostCard />\r\n                            <div />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"_column_list_post_card\" style={{ backgroundColor: 'white' }}>\r\n                    <div className=\"_column_list_post_card\" style={{ backgroundColor: 'white', flexDirection: 'row', margin : 0, padding:0, marginBottom: '10px' }}>\r\n                        <div style={{ flex: 1, display: 'flex', marginRight: '5px' }}>\r\n                            <PostCard />\r\n                        </div>\r\n                        <div style={{ flex: 1, display: 'flex', marginLeft: '5px' }}>\r\n                            <PostCard />\r\n                            <div />\r\n                        </div>\r\n                    </div>\r\n                    <PostCard tag=\"FOOD\" title=\"MLEM MLEM\" type=\"row\" />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Layout } from 'antd'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Home } from \"../pages\";\r\nimport { MenuNav } from \"../components\";\r\n\r\nexport const RootRouter = () => {\r\n    return (\r\n        <Layout>\r\n            <BrowserRouter>\r\n                <MenuNav />\r\n                <Switch>\r\n                    <Route path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                    <Route path=\"/home\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                </Switch>\r\n            </BrowserRouter >\r\n        </Layout>\r\n    );\r\n}\r\n\r\nfunction About() {\r\n    return (\r\n        <div>sdas</div>\r\n    )\r\n}\r\n","import React from \"react\";\n\nimport { RootRouter } from \"./router\";\n\nimport './css'\n\nfunction App() {\n  return (\n    <div className=\"_app\">\n      <RootRouter />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}